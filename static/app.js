let enlargedCards = new Set(); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –∑–±—ñ–ª—å—à–µ–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫
let currentlyEnlargedCard = null; // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ—Ç–æ—á–Ω—É –∑–±—ñ–ª—å—à–µ–Ω—É –∫–∞—Ä—Ç–∫—É

async function fetchRoomStatus() {
    try {
        const response = await fetch(`/api/room/json/${currentPlayer}`);
        const data = await response.json();

        updateDeckAndTrash(data.deck, data.trash);
        updateCardsOnTable(data.cards_on_table); // –û–Ω–æ–≤–ª—é—î–º–æ –∫–∞—Ä—Ç–∫–∏
        updatePlayers(data.players);
    } catch (err) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –∫—ñ–º–Ω–∞—Ç–∏:", err);
    }
}

function updateDeckAndTrash(deck, trash) {
    document.getElementById("deck-count").textContent = `Deck: ${deck ?? 0}`;
    document.getElementById("trash-count").textContent = `Trash: ${trash ?? 0}`;
}

function updateCardsOnTable(cards) {
    const container = document.getElementById("cards-on-table");
    container.innerHTML = "";  // –û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –∫–∞—Ä—Ç–∏

    cards.forEach(card => {
        const img = document.createElement("img");
        img.src = `/${card}`;
        img.alt = "card";
        img.classList.add("card");
        img.dataset.cardId = card; // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –∫–∞—Ä—Ç–∫–∏ (—à–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è)

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –±—É–ª–∞ –∫–∞—Ä—Ç–∫–∞ –∑–±—ñ–ª—å—à–µ–Ω–∞ —Ä–∞–Ω—ñ—à–µ
        if (enlargedCards.has(card)) {
            img.classList.add("enlarged");
            currentlyEnlargedCard = img;  // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω—É –∑–±—ñ–ª—å—à–µ–Ω—É –∫–∞—Ä—Ç–∫—É –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ
        }

        container.appendChild(img);
    });

    const cardElements = document.querySelectorAll('.card');
    cardElements.forEach(card => {
        card.addEventListener('click', () => {
            const cardId = card.dataset.cardId;

            // –Ø–∫—â–æ —î —ñ–Ω—à–∞ –∑–±—ñ–ª—å—à–µ–Ω–∞ –∫–∞—Ä—Ç–∫–∞, –∑–º–µ–Ω—à—É—î–º–æ —ó—ó
            if (currentlyEnlargedCard && currentlyEnlargedCard !== card) {
                currentlyEnlargedCard.classList.remove('enlarged');
                enlargedCards.delete(currentlyEnlargedCard.dataset.cardId);
            }

            // –ó–±—ñ–ª—å—à—É—î–º–æ –∞–±–æ –∑–º–µ–Ω—à—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –∫–∞—Ä—Ç–∫—É
            if (card.classList.contains('enlarged')) {
                card.classList.remove('enlarged');
                enlargedCards.delete(cardId);
                currentlyEnlargedCard = null; // –°–∫–∏–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –∑–±—ñ–ª—å—à–µ–Ω—É –∫–∞—Ä—Ç–∫—É
            } else {
                card.classList.add('enlarged');
                enlargedCards.add(cardId);
                currentlyEnlargedCard = card; // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω—É –∑–±—ñ–ª—å—à–µ–Ω—É –∫–∞—Ä—Ç–∫—É
            }

            console.log("üñ±Ô∏è –ö–ª—ñ–∫ –ø–æ –∫–∞—Ä—Ç—Ü—ñ –Ω–∞ —Å—Ç–æ–ª—ñ");
        });
    });
}

function updatePlayers(players) {
    const container = document.getElementById("players-container");

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–∂–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
    players.forEach((player, index) => {
        let playerDiv = container.querySelector(`.player-${index}`);
        if (!playerDiv) {
            playerDiv = document.createElement("div");
            playerDiv.className = `player player-${index}`;
            const nameSpan = document.createElement("span");
            nameSpan.textContent = player.name;
            playerDiv.appendChild(nameSpan);
            container.appendChild(playerDiv);
        }

        const cardsDiv = playerDiv.querySelector("div") || document.createElement("div");
        cardsDiv.innerHTML = ''; // –û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –∫–∞—Ä—Ç–∏

        player.cards.forEach(card => {
            const img = document.createElement("img");
            img.classList.add("player-card"); // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–ª—ñ–∫—ñ–≤
            img.style.zIndex = "1"; // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ z-index
            if (player.name === currentPlayer) {
                img.src = `/${card.image_url}`;
                img.dataset.cardId = card.image_url; // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –∫–∞—Ä—Ç–∫–∏ (—à–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è)
            } else {
                img.src = "/assets/card_template.png";  // –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É –¥–ª—è —ñ–Ω—à–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤
                img.dataset.cardId = "hidden"; // –©–æ–± –Ω–µ –æ–±—Ä–æ–±–ª—è—Ç–∏ –∫–ª—ñ–∫–∏ –ø–æ —á—É–∂–∏–º –∫–∞—Ä—Ç–∞–º
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –±—É–ª–∞ –∫–∞—Ä—Ç–∫–∞ –∑–±—ñ–ª—å—à–µ–Ω–∞ —Ä–∞–Ω—ñ—à–µ. –í–∞–∂–ª–∏–≤–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ dataset.cardId
            if (enlargedCards.has(img.dataset.cardId)) {
                img.classList.add("enlarged");
                img.style.zIndex = "10"; // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ z-index –¥–ª—è –∑–±—ñ–ª—å—à–µ–Ω–æ—ó –∫–∞—Ä—Ç–∫–∏
            }

            cardsDiv.appendChild(img);
        });

        playerDiv.appendChild(cardsDiv);
    });

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è CSS –¥–ª—è –ø–æ–∑–∏—Ü—ñ–π –≥—Ä–∞–≤—Ü—ñ–≤ –ø–æ –∫–æ–ª—É
    generatePlayerStyles(players.length);

    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–ª—ñ–∫—ñ–≤ –¥–ª—è –∫–∞—Ä—Ç–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤
    console.log("–î–æ–¥–∞—é –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–ª—ñ–∫—ñ–≤ –¥–ª—è –∫–∞—Ä—Ç–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤");
    const playerCards = Array.from(document.querySelectorAll('.player div img.player-card'))
        .filter(card => card.dataset.cardId !== 'hidden'); // <---- –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∫–∞—Ä—Ç–∫–∏

    console.log("–ó–Ω–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤:", playerCards.length);
    playerCards.forEach(card => {
        card.addEventListener('click', function() {
            const cardId = this.dataset.cardId;

            if (cardId === "hidden") {
                return;
            }

            const allPlayerCards = Array.from(document.querySelectorAll('.player div img.player-card'))
                .filter(card => card.dataset.cardId !== 'hidden');

            allPlayerCards.forEach(playerCard => {
                playerCard.style.zIndex = 1; // –°–∫–∏–¥–∞—î–º–æ z-index –¥–ª—è –≤—Å—ñ—Ö –∫–∞—Ä—Ç–æ–∫
                if (playerCard !== this && playerCard.classList.contains('enlarged')) {
                    playerCard.classList.remove('enlarged');
                    enlargedCards.delete(playerCard.dataset.cardId);
                }
            });
            
            if (this.classList.contains('enlarged')) {
                this.classList.remove('enlarged');
                enlargedCards.delete(cardId);
                this.style.zIndex = 1;
            } else {
                this.classList.add('enlarged');
                enlargedCards.add(cardId);
                this.style.zIndex = 10; // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ z-index –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –∫–∞—Ä—Ç–∫–∏
            }
            console.log("üñ±Ô∏è –ö–ª—ñ–∫ –ø–æ –∫–∞—Ä—Ç—Ü—ñ –≥—Ä–∞–≤—Ü—è");
        });
    });
}

function generatePlayerStyles(count) {
    const styleTag = document.getElementById("dynamic-player-styles") || document.createElement("style");
    styleTag.id = "dynamic-player-styles";
    let styles = "";
    for (let i = 0; i < count; i++) {
        const angle = (360 / count) * i;
        styles += `.player-${i} { transform: rotate(${angle}deg) translate(220px) rotate(-${angle}deg); }\n`;
    }
    styleTag.textContent = styles;
    document.head.appendChild(styleTag);
}

// –ü–µ—Ä—à–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è + –∫–æ–∂–Ω—É —Å–µ–∫—É–Ω–¥—É
fetchRoomStatus();
setInterval(fetchRoomStatus, 1000);